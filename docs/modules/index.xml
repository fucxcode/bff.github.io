<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BFF – 模块</title>
    <link>http://bff.github.io/docs/modules/</link>
    <description>Recent content in 模块 on BFF</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="http://bff.github.io/docs/modules/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 操作日志</title>
      <link>http://bff.github.io/docs/modules/logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bff.github.io/docs/modules/logs/</guid>
      <description>
        
        
        &lt;p&gt;当使用BFF时，操作日志统一由BFF记录，并由BFF提供操作日志查询接口。&lt;/p&gt;
&lt;p&gt;BFF记录日志和API服务自己记录日志的实现方式是一样的，只不过由BFF记录，可以保证统一性，并且也比较好实现。&lt;/p&gt;
&lt;p&gt;由于BFF记录日志，所有内部API服务中关于日志的i18n翻译文件，需要给BFF一份。可以在部署的时候通过挂载的方式将翻译文件挂载进去。或者API服务启动的时候，调用BFF RPC接口，将i18n文件内容发送给BFF。&lt;/p&gt;
&lt;p&gt;整体实现思路，和以前运营差不多。主要是几个日志中的字段意义需要明确一下。&lt;/p&gt;
&lt;h2 id=&#34;操作日志插件使用说明&#34;&gt;操作日志插件使用说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目前操作日志支持三种存储方式，分别是clickhouse, mongo 和 文件存储, 需要在配置文件中配置，如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  # 打印请求日志
  logger:
    enable: true
    type: clickhouse
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;其中type代表存储方式，可选值为：clickhouse, mongo, file&lt;/li&gt;
&lt;li&gt;三种存储方式对外表现完全一致，使用者不需要考虑针对某一种存储方式做特定操作&lt;/li&gt;
&lt;li&gt;如果在logic 里需要使用操作日志resource,比如读取（一般情况不需要），应该如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;l.svcCtx.ApiLog.Default.Read(conditions)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只需要使用Default即可&lt;/p&gt;
&lt;h2 id=&#34;添加日志详情的方法1&#34;&gt;添加日志详情的方法1&lt;/h2&gt;
&lt;p&gt;不管是BFF还是其它api服务，方法是一样的：&lt;/p&gt;
&lt;p&gt;首先更新&lt;code&gt;go-zero v1.4.3+&lt;/code&gt; &lt;code&gt;goctl tools/goctl/v1.4.1-20220908&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;logic里面&#34;&gt;logic里面&lt;/h3&gt;
&lt;p&gt;因为一般逻辑处理在logic里面，go-zero v1.4.3增加了在logic里面记录日志详情的方法:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;l.syslog(id, data)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;handler里面&#34;&gt;handler里面&lt;/h3&gt;
&lt;p&gt;在handler里面可以使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;git.cloud.top/go/go-zero/rest/echo/logger&amp;#34;

logger.SetSyslog(c, syslog)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;上面两个地方添加的日志效果一样，选一个地方填加就行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;api服务调用上面方法自定义日志详情后，框架会把这两个值传给BFF，并放到BFF的rest.Context中。所以两边使用起来都和操作本地数据一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在使用BFF的情况下，类似&lt;code&gt;/from/:name&lt;/code&gt;这种路由，由于是在产品侧api中注册的，BFF中没有路由信息，所以BFF获取的Path是&lt;code&gt;/from/具体值&lt;/code&gt;，导致BFF翻译出问题。&lt;code&gt;go-zero v1.4.5&lt;/code&gt;修改了该问题。（注意handler中要有&lt;code&gt;logger.BindSyslog(c, l.Context())&lt;/code&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;添加日志详情的方法2&#34;&gt;添加日志详情的方法2&lt;/h2&gt;
&lt;p&gt;根据响应信息，渲染日志详情。(TODO)&lt;/p&gt;
&lt;h2 id=&#34;操作日志部分字段说明&#34;&gt;操作日志部分字段说明&lt;/h2&gt;
&lt;h3 id=&#34;username&#34;&gt;username&lt;/h3&gt;
&lt;p&gt;用户名。&lt;strong&gt;注：查询的时候不要返回匿名用户的日志。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外日志中如果有过多的匿名用户的日志，需要思考日志记得对不对。&lt;/p&gt;
&lt;h3 id=&#34;menu&#34;&gt;menu&lt;/h3&gt;
&lt;p&gt;前端菜单，表示这个请求是由哪个菜单发起的。&lt;/p&gt;
&lt;p&gt;可以对应日志界面的&lt;code&gt;操作对象&lt;/code&gt;列, 翻译由前端负责。&lt;/p&gt;
&lt;h3 id=&#34;level&#34;&gt;level&lt;/h3&gt;
&lt;p&gt;日志级别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息： 20x&lt;/li&gt;
&lt;li&gt;警告: 600&lt;/li&gt;
&lt;li&gt;错误: 40x&lt;/li&gt;
&lt;li&gt;严重错误: 50x&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;这里有个需求：造某个级别的日志，测评的时候可能会遇到。需要整理一下访问哪个页面，做什么操作会触发对应的日志。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;success&#34;&gt;success&lt;/h3&gt;
&lt;p&gt;是否成功。20x成功，否则失败。&lt;/p&gt;
&lt;h3 id=&#34;time&#34;&gt;time&lt;/h3&gt;
&lt;p&gt;本地时间，时间戳。&lt;/p&gt;
&lt;h3 id=&#34;content&#34;&gt;content&lt;/h3&gt;
&lt;p&gt;这个字段可以表示日志内容或详情，前端只需要显示就行。日志内容不够详细，后端负责优化。&lt;/p&gt;
&lt;h4 id=&#34;后端日志content计算方法&#34;&gt;后端日志content计算方法&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if syslogid 非空:
    logid = syslogid
else:
    logid= method+path

content = i18n(logid, detail)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当一个api接口通过&lt;code&gt;method + path&lt;/code&gt;翻译不能满足需求时，可以自定义翻译id &lt;code&gt;syslog_id&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如上，&lt;code&gt;syslog_id&lt;/code&gt;非空时，日志的id为&lt;code&gt;syslog_id&lt;/code&gt;，否则为默认的&lt;code&gt;method + path&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;content为日志id经i18n翻译后的内容。&lt;/p&gt;
&lt;p&gt;这里的detail是日志中翻译模板中可能用到的值。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;syslog_id&lt;/code&gt; 的情况例子:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// i18n翻译文件
[
  {
          &amp;#34;id&amp;#34;: &amp;#34;helloName&amp;#34;,
          &amp;#34;translation&amp;#34;:&amp;#34;你好 {{.Name}}&amp;#34;
  }
]


// handler里面写日志详情
logger.SetSysLogID(c, &amp;#34;helloName&amp;#34;)
logger.Detail(c, &amp;#39;{&amp;#34;Name&amp;#34;: &amp;#34;zhangsan&amp;#34;}&amp;#39;)

// 翻译
T(ctx, syslog_id, detail)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;syslog_id&lt;/code&gt; 的情况例子2:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// i18n翻译文件
[
  {
          &amp;#34;id&amp;#34;: &amp;#34;helloName&amp;#34;,
          &amp;#34;translation&amp;#34;:&amp;#34;你好&amp;#34;
  }
]


// handler里面写日志详情
logger.SetSysLogID(c, &amp;#34;helloName&amp;#34;)

// 翻译
T(ctx, syslog_id)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;method + path&lt;/code&gt; 的情况例子:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// i18n翻译文件
[
  {
          &amp;#34;id&amp;#34;: &amp;#34;GET /api/v2/hello&amp;#34;,
          &amp;#34;translation&amp;#34;:&amp;#34;你好 {{.Name}}&amp;#34;
  }
]

// handler里面写日志详情
logger.Detail(c, &amp;#39;{&amp;#34;Name&amp;#34;: &amp;#34;zhangsan&amp;#34;}&amp;#39;)

// 翻译
T(ctx, &amp;#34;GET /api/v2/hello&amp;#34;, detail)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;method + path&lt;/code&gt; 的情况例子2:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// i18n翻译文件
[
  {
          &amp;#34;id&amp;#34;: &amp;#34;GET /api/v2/hello&amp;#34;,
          &amp;#34;translation&amp;#34;:&amp;#34;你好&amp;#34;
  }
]

// 翻译
T(ctx, &amp;#34;GET /api/v2/hello&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;detail&#34;&gt;detail&lt;/h3&gt;
&lt;p&gt;detail为翻译模板中的参数提供实际值。参考上节。&lt;/p&gt;
&lt;p&gt;这里建议detail只用作上面一种用途。不要干其它的。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 权限管理</title>
      <link>http://bff.github.io/docs/modules/permission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bff.github.io/docs/modules/permission/</guid>
      <description>
        
        
        &lt;h3 id=&#34;鉴权流程&#34;&gt;鉴权流程&lt;/h3&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 644px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;http://bff.github.io/docs/modules/permission/permission6_hufdad2e5284741a0b13c7cd3c7f792a45_229633_900x900_fit_catmullrom_3.png&#34; width=&#34;634&#34; height=&#34;900&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;
&lt;h3 id=&#34;鉴权流程解释&#34;&gt;鉴权流程解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;请求进来先通过jwt中间件，过了之后可以从context中拿到用户名, 进而从如下两方面进行了判断:&lt;/li&gt;
&lt;li&gt;一个是判断该用户拥有的menu_id是否和传过来的menu_link相吻合。这个是通过req header中的menu_link来判断。&lt;/li&gt;
&lt;li&gt;第二个判断该用户是否有访问某一条路由的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;menu菜单是什么从哪里来&#34;&gt;menu(菜单)是什么，从哪里来&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;菜单和menu ID, 由前端提供一个menu.json文件，文件示例如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[
  {
    &amp;#34;text&amp;#34;: &amp;#34;主导航&amp;#34;,
    &amp;#34;i18n&amp;#34;: &amp;#34;menu.main&amp;#34;,
    &amp;#34;group&amp;#34;: true,
    &amp;#34;hideInBreadcrumb&amp;#34;: true,
    &amp;#34;children&amp;#34;: [
      {
        &amp;#34;text&amp;#34;: &amp;#34;tenant_manage&amp;#34;,
        &amp;#34;i18n&amp;#34;: &amp;#34;menu.tenant_manage&amp;#34;,
        &amp;#34;icon&amp;#34;: &amp;#34;anticon antanticon anticon-team&amp;#34;,
        &amp;#34;readOnly&amp;#34;: false,
        &amp;#34;disabled&amp;#34;: false,
        &amp;#34;id&amp;#34;: 1,
        &amp;#34;children&amp;#34;: [
          {
            &amp;#34;text&amp;#34;: &amp;#34;tenant_manage&amp;#34;,
            &amp;#34;link&amp;#34;: &amp;#34;/user-center/tenant-manage&amp;#34;,
            &amp;#34;i18n&amp;#34;: &amp;#34;menu.tenant_manage&amp;#34;,
            &amp;#34;readOnly&amp;#34;: false,
            &amp;#34;disabled&amp;#34;: false,
            &amp;#34;id&amp;#34;: 11
          }
        ]
      }
    ]
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;文件说明: 这个文件是全部前端可以展示的菜单，菜单是一个树状结构。&lt;/li&gt;
&lt;li&gt;字段说明：&lt;/li&gt;
&lt;li&gt;id：menu id, 此id 唯一；&lt;/li&gt;
&lt;li&gt;link： menu_link，请求的时候需要放在req header中。&lt;/li&gt;
&lt;li&gt;disable：此菜单节点是否可用&lt;/li&gt;
&lt;li&gt;readonly: 此菜单节点是否可读写还是只读&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用户角色和权限或者说菜单的对应关系&#34;&gt;用户、角色、和权限(或者说菜单)的对应关系&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用户表里有一个role_name字段对应角色表里的role&lt;/li&gt;
&lt;li&gt;role表里有一个permissions的字段，是一个数组，对应多个permission, 如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{ 
    &amp;#34;role_name&amp;#34; : &amp;#34;dfwer&amp;#34;, 
    &amp;#34;role_type&amp;#34; : &amp;#34;custom&amp;#34;, 
    &amp;#34;role_desc&amp;#34; : &amp;#34;&amp;#34;, 
    &amp;#34;mode&amp;#34; : &amp;#34;&amp;#34;, 
    &amp;#34;client_id&amp;#34; : &amp;#34;&amp;#34;, 
    &amp;#34;permissions&amp;#34; : [
        &amp;#34;10&amp;#34;, 
        &amp;#34;110&amp;#34;, 
        &amp;#34;120&amp;#34;, 
        &amp;#34;130&amp;#34;, 
        &amp;#34;140&amp;#34;
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;permissions 里的元素是 menu id + &amp;ldquo;0&amp;rdquo; 或者 menu id + &amp;ldquo;1&amp;rdquo;, 0代表只读，1代表可读写&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;怎么判断用户是否具有某一条路由的权限&#34;&gt;怎么判断用户是否具有某一条路由的权限&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从上下文里拿到这条请求的路径，和请求方法(GET PUT DELETE POST)，用户名，通过用户名查到该用户的角色, 然后去查该角色是否有这条路由的权限。&lt;/li&gt;
&lt;li&gt;目前是借由casbin实现的，从目前的复杂度来看，其实不用casbin也可以，casbin最适用的场景是角色树，比如租户有子租户的全部权限，子租户还有子租户，疯狂嵌套类似这种。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;当开发了新功能模块时开发人员需要做哪些工作&#34;&gt;当开发了新功能模块时，开发人员需要做哪些工作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;menu.json, 只需要维护这个文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10月11日更新&#34;&gt;10月11日更新&lt;/h3&gt;
&lt;h3 id=&#34;优化使用者-更新权限时流程过于复杂的问题&#34;&gt;优化使用者 更新权限时，流程过于复杂的问题&lt;/h3&gt;
&lt;h5 id=&#34;说明&#34;&gt;说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;目前使用者更新权限，需要更新menu.json, permission.json, bff_user_role和 bff_user_role_t 四个文件，并且执行初始化程序，才能够正常更新权限模块。&lt;/li&gt;
&lt;li&gt;改版后，使用者只需要维护menu.json 和permission.json两个文件，并且不用执行初始化程序&lt;/li&gt;
&lt;li&gt;新增的这个功能也是函数式的，以后可以根据需要来决定是否使用(目前直接使用)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;menujson变动&#34;&gt;menu.json变动&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;menu.json增加字段owner , 如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
     &amp;#34;id&amp;#34;: &amp;#34;2&amp;#34;,
     &amp;#34;text&amp;#34;: &amp;#34;订单管理&amp;#34;,
     &amp;#34;i18n&amp;#34;: &amp;#34;menu.order_management&amp;#34;,
     &amp;#34;icon&amp;#34;: &amp;#34;anticon antanticon anticon-file-done&amp;#34;,
     &amp;#34;link&amp;#34;: &amp;#34;/customer/order&amp;#34;,
     &amp;#34;owner&amp;#34;: [&amp;#34;role_security&amp;#34;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;owner为拥有该菜单(权限)的角色，这个角色可以是预置角色，也可以不是（一般情况更新预置角色即可），只要是当前数据库里角色表里存在的角色都会更新&lt;/li&gt;
&lt;li&gt;超级管理员不用写，自动拥有全部权限，超管的角色名是role_admin 这个是固定的。&lt;/li&gt;
&lt;li&gt;如果menu.json没有出现的角色不会作任何更改，出现了的角色，会全量更新，即只要是出现了的角色，menu.json里必须保证此角色在所有应该存在的menu节点下存在。&lt;/li&gt;
&lt;li&gt;权限的更新时机是启动服务和切换三权超管时，不用再执行初始化程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10月17日更新&#34;&gt;10月17日更新&lt;/h3&gt;
&lt;h3 id=&#34;删除permissionjson文件合并至menujson&#34;&gt;删除permission.json文件，合并至menu.json&lt;/h3&gt;
&lt;h4 id=&#34;说明-1&#34;&gt;说明&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;两个配置文件合并，现在一个完整的menu.json中的节点示例如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
        &amp;#34;id&amp;#34;: &amp;#34;1&amp;#34;,
        &amp;#34;text&amp;#34;: &amp;#34;测试菜单&amp;#34;,
        &amp;#34;i18n&amp;#34;: &amp;#34;menu.equipment_monitor&amp;#34;,
        &amp;#34;icon&amp;#34;: &amp;#34;anticon antanticon anticon-compass&amp;#34;,
        &amp;#34;owner&amp;#34;: [&amp;#34;role_security&amp;#34;],
        &amp;#34;readOnly&amp;#34;: false,
        &amp;#34;disabled&amp;#34;: false,
        &amp;#34;hide&amp;#34;: false,
        &amp;#34;paths&amp;#34;: [&amp;#34;/api/v2/monitor/overview*&amp;#34;,&amp;#34;/api/v2/monitor/device_instance*&amp;#34;],
        &amp;#34;skipper&amp;#34;: [&amp;#34;/api/v2/monitor/overview/test&amp;#34;],
        &amp;#34;children&amp;#34;: []
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;字段说明&#34;&gt;字段说明&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;id: menu id，必须有，如果没有,此节点包括其子节点都不会有任何作用, 类型是字符串，可以以0开头&lt;/li&gt;
&lt;li&gt;i18n: 节点名称, icon: 图标, text: 中文名称, hide: 是否隐藏, disable: 是否作废. 这几个是给前端显示用的.&lt;/li&gt;
&lt;li&gt;readOnly: 只读还是可读写&lt;/li&gt;
&lt;li&gt;owner: 权限拥有者，见上文&lt;/li&gt;
&lt;li&gt;paths: 这个菜单下面的所有可访问路径，代替之前的permission.json&lt;/li&gt;
&lt;li&gt;skipper: 这个菜单下面的所有可跳过路径，代替之前的permission.json(实际上不是这个菜单下的也可)&lt;/li&gt;
&lt;li&gt;children: 子节点，这是一棵树，可以有无穷多级&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;凡是不在此列出的字段都是无效的&#34;&gt;凡是不在此列出的字段都是无效的&lt;/h5&gt;
&lt;h5 id=&#34;删除此文档所有和permissionjson-相关的内容以后只维护一个menujson&#34;&gt;删除此文档所有和permission.json 相关的内容，以后只维护一个menu.json&lt;/h5&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 消息中心</title>
      <link>http://bff.github.io/docs/modules/message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bff.github.io/docs/modules/message/</guid>
      <description>
        
        
        &lt;h2 id=&#34;流程简述&#34;&gt;流程简述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;web前端通过websocket连接服务端，服务端维持这个连接，直到客户端断开，或者认证过期。&lt;/li&gt;
&lt;li&gt;建立连接后，服务端会首先下发一次消息中心统计数据，之后在每次消息中心数据有更新后，都会下发所有客户端一次统计数据。&lt;/li&gt;
&lt;li&gt;消息生产者可以通过http和rpc发送消息的api，定向发给某一个或某一组客户端消息&lt;/li&gt;
&lt;li&gt;发送消息必须通过消息模版, 消息模版下面有说明。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他服务和消息中心的交互&#34;&gt;其他服务和消息中心的交互&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端, 客户端通过/ws 接口建立websocket连接&lt;/li&gt;
&lt;li&gt;消息生产者, 通过rpc或者http接口发送消息&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;消息中心模型&#34;&gt;消息中心模型&lt;/h2&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 910px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;http://bff.github.io/docs/modules/message/message2_hu65941fdfed2cda8148d3fda572514bad_44721_900x900_fit_q75_catmullrom.jpeg&#34; width=&#34;900&#34; height=&#34;469&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;
&lt;h2 id=&#34;模型说明&#34;&gt;模型说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当message资源加载时，启动一个hub, 这个hub相当于是所有client的管理者，它负责所有client的连接和断开，如果有client要广播，也需要通过hub，hub上的属性如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Hub struct {
	clients map[*Client]bool

	broadcast chan broadcastInfo

	register chan *Client

	unregister chan *Client

	registerHandler   func(*Client) error
	unregisterHandler func(*Client) error
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;当有web客户端来通过websocket来连接服务器，我们会生成一个client，并且在hub上注册，这个client上包含这个connection的所有信息，也就是说和客户端的通讯要靠这个client，client属性如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Client struct {
	Id       string
	UserName string
	RealIp   string
	Groups   []string

	conn *websocket.Conn

	send   chan []byte
	cancel chan bool
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;消息模版说明&#34;&gt;消息模版说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;消息模版使用go template模版语法, 示例如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
    &amp;lt;title&amp;gt;{{.title}}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;  尊敬的用户{{.username}}:&amp;lt;/p&amp;gt;
 &amp;lt;p class=&amp;#34;text-indent&amp;#34;&amp;gt;{{.description}}, 请及时处理&amp;lt;/p&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;发送消息时候指定模版id和其中字段，如上title和username&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨服务通信支持&#34;&gt;跨服务通信支持&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;消息中心服务支持在本服务注册的客户端的通信，即, 在目前bff和后台服务一对一的模式下，目前消息中心支持本后台服务的消息通讯。&lt;/li&gt;
&lt;li&gt;如果需要往其他服务的消息中心客户端，需要走rpc接口，发送消息&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
